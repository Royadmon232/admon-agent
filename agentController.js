import fs from 'fs/promises';
import axios from 'axios';
import { lookupRelevantQAs } from './services/vectorSearch.js';
import { recall, remember, updateCustomer } from "./services/memoryService.js";
import { buildSalesResponse, intentDetect } from "./services/salesTemplates.js";
import { smartAnswer } from "./services/ragChain.js";
import { startHouseQuoteFlow } from "./houseQuoteFlow.js";

const EMB_MODEL = "text-embedding-3-small";
const SEMANTIC_THRESHOLD = 0.78;
const PRIMARY_MODEL = 'text-embedding-3-small';
const FALLBACK_MODEL = 'text-embedding-ada-002';

// Load knowledge base once at startup
let KNOWLEDGE = [];
try {
  const knowledgePath = new URL('./insurance_knowledge.json', import.meta.url);
  const rawData = await fs.readFile(knowledgePath, 'utf8');
  const insuranceKnowledgeBase = JSON.parse(rawData);
  KNOWLEDGE = insuranceKnowledgeBase.insurance_home_il_qa;
  console.log(`‚úÖ Loaded ${KNOWLEDGE.length} knowledge base entries`);
} catch (e) {
  console.error('‚ö†Ô∏è  Failed to load knowledge base:', e.message);
  KNOWLEDGE = [];
}

// GPT-4o based semantic question answering
export async function semanticLookup(userMsg, memory = {}) {
  if (!process.env.OPENAI_API_KEY) {
    console.error("‚ùå OpenAI API key not found in environment variables");
    return "◊û◊¶◊ò◊¢◊®, ◊ê◊ô◊®◊¢◊î ◊©◊í◊ô◊ê◊î ◊ë◊ò◊ô◊§◊ï◊ú ◊ë◊î◊ï◊ì◊¢◊î ◊©◊ú◊ö. ◊ê◊†◊ê ◊†◊°◊î ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.";
  }

  // RAG BEGIN before building messages:
  const matches = await lookupRelevantQAs(userMsg, 8, 0.60);
  let contextBlock = matches.map(m => `◊©◊ê◊ú◊î: ${m.question}\n◊™◊©◊ï◊ë◊î: ${m.answer}`).join('\n\n');
  if (contextBlock.length / 4 > 1500) { contextBlock = contextBlock.slice(0, 6000); }
  const baseSystemPrompt = `◊ê◊™◊î ◊ì◊ï◊†◊ô, ◊°◊ï◊õ◊ü ◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊ï◊™ ◊ï◊ô◊®◊ò◊ï◊ê◊ú◊ô. ◊ì◊ë◊® ◊ë◊¢◊ë◊®◊ô◊™ ◊ë◊í◊ï◊£ ◊®◊ê◊©◊ï◊ü. ◊ê◊™◊î ◊°◊ï◊õ◊ü ◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊ï◊™ ◊û◊ß◊¶◊ï◊¢◊ô ◊ï◊ê◊ì◊ô◊ë. ◊™◊§◊ß◊ô◊ì◊ö ◊ú◊¢◊†◊ï◊™ ◊¢◊ú ◊©◊ê◊ú◊ï◊™ ◊ë◊†◊ï◊©◊ê ◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊î ◊ë◊¶◊ï◊®◊î ◊û◊ß◊¶◊ï◊¢◊ô◊™, ◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™ ◊ï◊û◊ß◊ô◊§◊î.

\n◊õ◊ú ◊™◊©◊ï◊ë◊î ◊©◊ú◊ö ◊ó◊ô◊ô◊ë◊™:
  1. ◊ú◊î◊ô◊ï◊™ ◊ë◊¢◊ë◊®◊ô◊™ ◊™◊ß◊ô◊†◊î ◊ï◊û◊ß◊¶◊ï◊¢◊ô◊™
  2. ◊ú◊î◊ô◊ï◊™ ◊û◊†◊ï◊°◊ó◊™ ◊ë◊¶◊ï◊®◊î ◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™, ◊û◊õ◊ë◊ì◊™ ◊ï◊ë◊ò◊ï◊ü ◊ê◊ô◊©◊ô ◊ï◊†◊¢◊ô◊ù
  3. ◊ú◊î◊™◊ô◊ô◊ó◊° ◊ô◊©◊ô◊®◊ï◊™ ◊ú◊©◊ê◊ú◊î ◊©◊†◊©◊ê◊ú◊î
  4. ◊ú◊õ◊ú◊ï◊ú ◊ê◊™ ◊õ◊ú ◊î◊û◊ô◊ì◊¢ ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô ◊ï◊î◊ó◊©◊ï◊ë
  5. ◊ú◊î◊ô◊ï◊™ ◊û◊ì◊ï◊ô◊ß◊™ ◊û◊ë◊ó◊ô◊†◊î ◊û◊ß◊¶◊ï◊¢◊ô◊™
  
\n◊ô◊© ◊ú◊ö ◊í◊ô◊©◊î ◊ú◊®◊©◊ô◊û◊™ ◊©◊ê◊ú◊ï◊™ ◊ï◊™◊©◊ï◊ë◊ï◊™ ◊©◊õ◊ô◊ó◊ï◊™. ◊¢◊ú◊ô◊ö:
  1. ◊ú◊î◊©◊™◊û◊© ◊ë◊™◊©◊ï◊ë◊î ◊î◊û◊™◊ê◊ô◊û◊î ◊ë◊ô◊ï◊™◊® ◊û◊î◊®◊©◊ô◊û◊î ◊õ◊ë◊°◊ô◊° ◊ú◊™◊©◊ï◊ë◊î ◊©◊ú◊ö, ◊ê◊ö ◊ú◊†◊°◊ó ◊ê◊ï◊™◊î ◊û◊ó◊ì◊© ◊ë◊°◊í◊†◊ï◊ü ◊ê◊ô◊©◊ô ◊ï◊ô◊ô◊ó◊ï◊ì◊ô ◊û◊©◊ú◊ö, ◊©◊™◊®◊í◊ô◊© ◊ê◊ï◊™◊†◊ò◊ô◊™ ◊ï◊ò◊ë◊¢◊ô◊™ ◊ú◊ú◊ß◊ï◊ó
  2. ◊ê◊ù ◊ê◊ô◊ü ◊™◊©◊ï◊ë◊î ◊û◊™◊ê◊ô◊û◊î ◊ë◊®◊©◊ô◊û◊î, ◊¢◊ú◊ô◊ö ◊ú◊¢◊†◊ï◊™ ◊ë◊¢◊¶◊û◊ö ◊ë◊¶◊ï◊®◊î ◊û◊ß◊¶◊ï◊¢◊ô◊™, ◊¢◊†◊ô◊ô◊†◊ô◊™ ◊ï◊ê◊ô◊©◊ô◊™
  3. ◊ú◊ï◊ï◊ì◊ê ◊©◊î◊™◊©◊ï◊ë◊î ◊©◊ú◊û◊î, ◊û◊õ◊°◊î ◊ê◊™ ◊õ◊ú ◊î◊î◊ô◊ë◊ò◊ô◊ù ◊î◊ó◊©◊ï◊ë◊ô◊ù ◊©◊ú ◊î◊©◊ê◊ú◊î, ◊ï◊û◊©◊ì◊®◊™ ◊ë◊ô◊ò◊ó◊ï◊ü ◊ï◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™ ◊ú◊ú◊ß◊ï◊ó

◊ê◊ù ◊ê◊ô◊ü ◊ú◊ö ◊û◊ô◊ì◊¢ ◊û◊°◊§◊ô◊ß ◊ê◊ï ◊©◊ê◊™◊î ◊ú◊ê ◊ë◊ò◊ï◊ó ◊ë◊™◊©◊ï◊ë◊î, ◊ê◊û◊ï◊® ◊ñ◊ê◊™ ◊ë◊õ◊†◊ï◊™ ◊ï◊ë◊ô◊ì◊ô◊ì◊ï◊™◊ô◊ï◊™, ◊ï◊î◊¶◊¢ ◊ú◊ú◊ß◊ï◊ó ◊ú◊ë◊ì◊ï◊ß ◊ê◊™ ◊î◊¢◊†◊ô◊ô◊ü ◊ô◊ó◊ì ◊ê◊ô◊™◊ö.`;

  const systemPrompt = matches.length
     ? `${baseSystemPrompt}\n\n${contextBlock}`
     : baseSystemPrompt;
  const messages = [
    { role: 'system', content: systemPrompt },
    { role: 'user',   content: userMsg }
  ];
  // RAG END

  // RAG-TRACE BEGIN
  if (matches.length) {
    console.log('[RAG] top matches:',
      matches.map(m => ({ q: m.question.slice(0,40)+'‚Ä¶', score: m.score.toFixed(2) })));
  } else {
    console.log('[RAG] no KB match ‚Üí fallback');
  }
  // RAG-TRACE END

  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4o",
        messages: messages,
        temperature: 0.7,
        max_tokens: 500
      },
      {
        headers: {
          "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        }
      }
    );

    const answer = response.data.choices[0].message.content.trim();
    console.log("GPT-4o response:", answer);
    return answer;
  } catch (error) {
    console.error("Error calling GPT-4o:", error.response?.data || error.message);
    return "◊û◊¶◊ò◊¢◊®, ◊ê◊ô◊®◊¢◊î ◊©◊í◊ô◊ê◊î ◊ë◊ò◊ô◊§◊ï◊ú ◊ë◊î◊ï◊ì◊¢◊î ◊©◊ú◊ö. ◊ê◊†◊ê ◊†◊°◊î ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.";
  }
}

// Main message handler
export async function handleMessage(phone, userMsg) {
  try {
    // Check for quote request at the very top
    const quotePatterns = [
      /◊ê◊†◊ô ◊®◊ï◊¶◊î ◊î◊¶◊¢◊™ ◊û◊ó◊ô◊®/i,
      /◊û◊¢◊ï◊†◊ô◊ô◊ü ◊ë◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊î/i,
      /◊©◊ú◊ó ◊ú◊ô ◊ò◊ï◊§◊° ◊ë◊ô◊ò◊ï◊ó/i,
      /◊®◊ï◊¶◊î ◊ú◊ë◊ò◊ó ◊ê◊™ ◊î◊ì◊ô◊®◊î/i,
      /◊õ◊û◊î ◊¢◊ï◊ú◊î ◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊î/i,
      /◊î◊¶◊¢◊™ ◊û◊ó◊ô◊®/i,
      /◊õ◊û◊î ◊¢◊ï◊ú◊î/i,
      /◊û◊ó◊ô◊®.*◊ë◊ô◊ò◊ï◊ó/i,
      /◊ë◊ô◊ò◊ï◊ó.*◊û◊ó◊ô◊®/i,
      /◊®◊ï◊¶◊î.*◊î◊¶◊¢◊î/i,
      /◊û◊¢◊ï◊†◊ô◊ô◊ü.*◊î◊¶◊¢◊î/i,
      /◊û◊î ◊î◊û◊ó◊ô◊®/i,
      /◊õ◊û◊î ◊ñ◊î ◊¢◊ï◊ú◊î/i,
      /◊®◊ï◊¶◊î ◊ú◊ë◊ò◊ó/i,
      /◊û◊¢◊ï◊†◊ô◊ô◊ü ◊ë◊ë◊ô◊ò◊ï◊ó/i
    ];
    
    const isQuoteRequest = quotePatterns.some(pattern => pattern.test(userMsg));
    if (isQuoteRequest) {
      console.info("[Quote Flow] Quote request detected, starting quote flow");
      return await startHouseQuoteFlow(phone, userMsg);
    }

    // Extract name if present
    if (/^(?:◊ê◊†◊ô|◊©◊û◊ô)\s+([^\s]+)/i.test(userMsg)) {
      const name = RegExp.$1;
      await updateCustomer(phone, { first_name: name });
    }

    // Get memory and detect intent
    const memory = await recall(phone);
    console.info("[Memory Loaded]:", memory);
    
    // Check if user is already in quote flow
    if (memory.quoteStage && memory.quoteStage !== 'stage1_completed') {
      console.info("[Quote Flow] User is in quote flow, routing to quote handler");
      const quoteResponse = await startHouseQuoteFlow(phone, userMsg);
      return quoteResponse;
    }
    
    // Check for quote confirmation flow
    const isConfirmation = detectConfirmation(userMsg);
    
    // Handle quote confirmation flow
    if (memory.awaitingQuoteConfirmation && isConfirmation) {
      // User confirmed, clear the flag and start quote form
      await remember(phone, 'awaitingQuoteConfirmation', null);
      await remember(phone, 'quoteStage', 'id_number'); // Initialize quote flow
      
      const confirmationReply = "‚úÖ *◊û◊¢◊ï◊ú◊î!*\n\n◊ë◊ï◊ê◊ï ◊†◊™◊ó◊ô◊ú ◊ë◊™◊î◊ú◊ô◊ö ◊î◊¶◊¢◊™ ◊î◊û◊ó◊ô◊®. ◊ê◊†◊ô ◊ê◊©◊ê◊ú ◊ê◊ï◊™◊ö ◊õ◊û◊î ◊©◊ê◊ú◊ï◊™ ◊ß◊¶◊®◊ï◊™ ◊õ◊ì◊ô ◊ú◊î◊õ◊ô◊ü ◊¢◊ë◊ï◊®◊ö ◊î◊¶◊¢◊î ◊û◊ï◊™◊ê◊û◊™ ◊ê◊ô◊©◊ô◊™.\n\nüöÄ *◊û◊™◊ó◊ô◊ú◊ô◊ù ◊¢◊õ◊©◊ô◊ï...*";
      await sendWhatsAppMessage(phone, confirmationReply);
      
      // Start the house quote flow
      const quoteResponse = await startHouseQuoteFlow(phone, "");
      
      return confirmationReply;
    }
    
    if (isQuoteRequest && !memory.awaitingQuoteConfirmation) {
      // User wants a quote but hasn't confirmed yet
      await remember(phone, 'awaitingQuoteConfirmation', true);
      
      const confirmationMsg = "◊î◊ê◊ù ◊ê◊™◊î ◊û◊ê◊©◊® ◊ú◊î◊™◊ó◊ô◊ú ◊™◊î◊ú◊ô◊ö ◊©◊ú ◊î◊¶◊¢◊™ ◊û◊ó◊ô◊® ◊ú◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊î?";
      
      // Send message with quick reply button
      await sendWhatsAppMessageWithButton(phone, confirmationMsg, "◊ê◊†◊ô ◊û◊ê◊©◊®", "CONFIRM_START_QUOTE");
      return confirmationMsg;
    }
    
    const intent = intentDetect(userMsg);
    console.info("[Intent Detected]:", intent);
    
    // Get response from RAG or sales
    const ragAns = await smartAnswer(userMsg, memory) || await semanticLookup(userMsg, memory);
    console.info("[LangChain RAG used]:", !!ragAns);
    let reply = ragAns;
    if (!ragAns) {
      if (intent === 'lead_gen') reply = buildSalesResponse('lead_gen', memory);
      else if (intent === 'price_pushback') reply = buildSalesResponse('objection', memory);
      else if (intent === 'close') reply = buildSalesResponse('close', memory);
      else reply = buildSalesResponse('default', memory);
      console.info("[Sales fallback triggered]:", reply);
    }

    // Remember the message
    await remember(phone, 'lastMsg', userMsg);
    console.info("[Memory Updated] lastMsg saved:", userMsg);

    // Send response via WhatsApp
    await sendWhatsAppMessage(phone, reply);
    
    return reply;
  } catch (error) {
    console.error("Error handling message:", error);
    const errorMsg = "◊û◊¶◊ò◊¢◊®, ◊ê◊ô◊®◊¢◊î ◊©◊í◊ô◊ê◊î ◊ë◊ò◊ô◊§◊ï◊ú ◊ë◊î◊ï◊ì◊¢◊î ◊©◊ú◊ö. ◊ê◊†◊ê ◊†◊°◊î ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.";
    await sendWhatsAppMessage(phone, errorMsg);
    return errorMsg;
  }
}

// Helper function to detect quote intent
function detectQuoteIntent(userMsg) {
  const quotePatterns = [
    /◊ê◊†◊ô ◊®◊ï◊¶◊î ◊î◊¶◊¢◊™ ◊û◊ó◊ô◊®/i,
    /◊õ◊û◊î ◊¢◊ï◊ú◊î ◊ë◊ô◊ò◊ï◊ó ◊ì◊ô◊®◊î/i,
    /◊û◊¢◊ï◊†◊ô◊ô◊ü ◊ú◊ë◊ò◊ó ◊ê◊™ ◊î◊ì◊ô◊®◊î/i,
    /◊ò◊ï◊§◊° ◊ë◊ô◊ò◊ï◊ó/i,
    /◊î◊¶◊¢◊™ ◊û◊ó◊ô◊®/i,
    /◊õ◊û◊î ◊¢◊ï◊ú◊î/i,
    /◊û◊ó◊ô◊®.*◊ë◊ô◊ò◊ï◊ó/i,
    /◊ë◊ô◊ò◊ï◊ó.*◊û◊ó◊ô◊®/i,
    /◊®◊ï◊¶◊î.*◊î◊¶◊¢◊î/i,
    /◊û◊¢◊ï◊†◊ô◊ô◊ü.*◊î◊¶◊¢◊î/i,
    /◊û◊î ◊î◊û◊ó◊ô◊®/i,
    /◊õ◊û◊î ◊ñ◊î ◊¢◊ï◊ú◊î/i,
    /◊®◊ï◊¶◊î ◊ú◊ë◊ò◊ó/i,
    /◊û◊¢◊ï◊†◊ô◊ô◊ü ◊ë◊ë◊ô◊ò◊ï◊ó/i
  ];
  
  return quotePatterns.some(pattern => pattern.test(userMsg));
}

// Helper function to detect confirmation
function detectConfirmation(userMsg) {
  const confirmationPatterns = [
    /◊ê◊†◊ô ◊û◊ê◊©◊®/i,
    /◊û◊ê◊©◊®/i,
    /◊õ◊ü/i,
    /◊ë◊°◊ì◊®/i,
    /◊ê◊ï◊ß◊ô◊ô/i,
    /ok/i,
    /◊ë◊ï◊ê◊ï ◊†◊™◊ó◊ô◊ú/i,
    /◊ê◊†◊ô ◊û◊ï◊õ◊ü/i,
    /◊†◊¢◊©◊î ◊ê◊™ ◊ñ◊î/i,
    /CONFIRM_START_QUOTE/i
  ];
  
  return confirmationPatterns.some(pattern => pattern.test(userMsg));
}

// WhatsApp message sending function
export async function sendWhatsAppMessage(to, message) {
  if (!process.env.WHATSAPP_API_TOKEN || !process.env.WHATSAPP_PHONE_NUMBER_ID) {
    console.error("‚ùå WhatsApp API configuration missing");
    return;
  }

  try {
    await axios.post(
      `https://graph.facebook.com/v18.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`,
      { 
        messaging_product: "whatsapp", 
        to: to, 
        text: { body: message } 
      },
      { 
        headers: { 
          Authorization: `Bearer ${process.env.WHATSAPP_API_TOKEN}`, 
          "Content-Type": "application/json" 
        } 
      }
    );
  } catch (error) {
    console.error("Error sending WhatsApp message:", error.response?.data || error.message);
    throw error;
  }
}

// WhatsApp message sending function with quick reply button
export async function sendWhatsAppMessageWithButton(to, message, buttonTitle, buttonPayload) {
  if (!process.env.WHATSAPP_API_TOKEN || !process.env.WHATSAPP_PHONE_NUMBER_ID) {
    console.error("‚ùå WhatsApp API configuration missing");
    return;
  }

  try {
    const payload = {
      messaging_product: "whatsapp",
      to: to,
      type: "interactive",
      interactive: {
        type: "button",
        body: {
          text: message
        },
        action: {
          buttons: [
            {
              type: "reply",
              reply: {
                id: buttonPayload,
                title: buttonTitle
              }
            }
          ]
        }
      }
    };

    await axios.post(
      `https://graph.facebook.com/v18.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`,
      payload,
      { 
        headers: { 
          Authorization: `Bearer ${process.env.WHATSAPP_API_TOKEN}`, 
          "Content-Type": "application/json" 
        } 
      }
    );
    
    console.log(`‚úÖ Sent WhatsApp message with button to ${to}`);
  } catch (error) {
    console.error("Error sending WhatsApp message with button:", error.response?.data || error.message);
    // Fallback to regular message if button fails
    console.log("üîÑ Falling back to regular message...");
    await sendWhatsAppMessage(to, `${message}\n\n[${buttonTitle}]`);
  }
}

