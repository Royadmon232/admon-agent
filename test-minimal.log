
> insurance-whatsapp-bot@1.0.0 test
> NODE_OPTIONS=--experimental-vm-modules jest --passWithNoTests

(node:20321) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL tests/salesTemplates.test.js
  ● salesTemplates › intentDetect › should detect price_pushback intent when text contains "יקר"

    expect(received).toBe(expected) // Object.is equality

    Expected: "frustration"
    Received: "price_pushback"

      11 |
      12 |       testCases.forEach(text => {
    > 13 |         expect(intentDetect(text)).toBe('frustration');
         |                                    ^
      14 |       });
      15 |     });
      16 |   });

      at tests/salesTemplates.test.js:13:36
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/salesTemplates.test.js:12:17)

  ● salesTemplates › buildSalesResponse › should return non-empty string for each intent

    expect(received).toBeTruthy()

    Received: ""

      28 |       intents.forEach(intent => {
      29 |         const response = buildSalesResponse(intent, mockMemory);
    > 30 |         expect(response).toBeTruthy();
         |                          ^
      31 |         expect(typeof response).toBe('string');
      32 |         expect(response.length).toBeGreaterThan(0);
      33 |       });

      at tests/salesTemplates.test.js:30:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/salesTemplates.test.js:28:15)

(node:20320) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL tests/memoryService.test.js
  ● Console

    console.log
      [memoryService] ℹ️  No valid updates to apply

      at updateCustomer (services/memoryService.js:166:15)

  ● Memory Service › remember() › should insert customer and memory record

    AggregateError:

      107 |   try {
      108 |     // Ensure customer exists first
    > 109 |     await pool.query(
          |     ^
      110 |       'INSERT INTO customers (phone) VALUES ($1) ON CONFLICT (phone) DO NOTHING',
      111 |       [phone]
      112 |     );

      at node_modules/pg-pool/index.js:45:11
      at remember (services/memoryService.js:109:5)
      at Object.<anonymous> (tests/memoryService.test.js:32:7)

  ● Memory Service › remember() › should handle errors gracefully

    TypeError: mockPool.query.mockRejectedValueOnce is not a function

      47 |     it('should handle errors gracefully', async () => {
      48 |       const error = new Error('DB error');
    > 49 |       mockPool.query.mockRejectedValueOnce(error);
         |                      ^
      50 |
      51 |       await expect(remember('+972501234567', 'key', 'value'))
      52 |         .rejects.toThrow('DB error');

      at Object.<anonymous> (tests/memoryService.test.js:49:22)

  ● Memory Service › recall() › should return memory object with latest values

    TypeError: mockPool.query.mockResolvedValueOnce is not a function

      63 |       ];
      64 |
    > 65 |       mockPool.query.mockResolvedValueOnce({ rows: mockRows });
         |                      ^
      66 |
      67 |       const memory = await recall(phone);
      68 |

      at Object.<anonymous> (tests/memoryService.test.js:65:22)

  ● Memory Service › recall() › should return empty object on error

    TypeError: mockPool.query.mockRejectedValueOnce is not a function

      79 |
      80 |     it('should return empty object on error', async () => {
    > 81 |       mockPool.query.mockRejectedValueOnce(new Error('DB error'));
         |                      ^
      82 |
      83 |       const memory = await recall('+972501234567');
      84 |       expect(memory).toEqual({});

      at Object.<anonymous> (tests/memoryService.test.js:81:22)

  ● Memory Service › updateCustomer() › should upsert customer with provided fields

    expect(received).toHaveBeenCalledWith(...expected)

    Matcher error: received value must be a mock or spy function

    Received has type:  function
    Received has value: [Function query]

       96 |       await updateCustomer(phone, fields);
       97 |
    >  98 |       expect(mockPool.query).toHaveBeenCalledWith(
          |                              ^
       99 |         expect.stringContaining('INSERT INTO customers (phone, first_name, city)'),
      100 |         [phone, 'John', 'Tel Aviv']
      101 |       );

      at Object.<anonymous> (tests/memoryService.test.js:98:30)

  ● Memory Service › updateCustomer() › should do nothing with empty fields object

    expect(received).not.toHaveBeenCalled()

    Matcher error: received value must be a mock or spy function

    Received has type:  function
    Received has value: [Function query]

      104 |     it('should do nothing with empty fields object', async () => {
      105 |       await updateCustomer('+972501234567', {});
    > 106 |       expect(mockPool.query).not.toHaveBeenCalled();
          |                                  ^
      107 |     });
      108 |
      109 |     it('should handle errors gracefully', async () => {

      at Object.<anonymous> (tests/memoryService.test.js:106:34)

  ● Memory Service › updateCustomer() › should handle errors gracefully

    TypeError: mockPool.query.mockRejectedValueOnce is not a function

      109 |     it('should handle errors gracefully', async () => {
      110 |       const error = new Error('DB error');
    > 111 |       mockPool.query.mockRejectedValueOnce(error);
          |                      ^
      112 |
      113 |       await expect(updateCustomer('+972501234567', { name: 'John' }))
      114 |         .rejects.toThrow('DB error');

      at Object.<anonymous> (tests/memoryService.test.js:111:22)

(node:20319) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL tests/twilioService.test.js
  ● Twilio Service › sendWapp › should call Twilio client messages.create with correct parameters

    accountSid must start with AC

      23 |
      24 |   beforeEach(() => {
    > 25 |     mockTwilioClient = twilio();
         |                        ^
      26 |     jest.clearAllMocks();
      27 |   });
      28 |

      at Twilio.setAccountSid (node_modules/twilio/lib/base/BaseTwilio.js:82:23)
      at new Client (node_modules/twilio/lib/base/BaseTwilio.js:45:18)
      at new Twilio (node_modules/twilio/lib/rest/Twilio.js:33:9)
      at TwilioSDK (node_modules/twilio/lib/index.js:43:12)
      at Object.<anonymous> (tests/twilioService.test.js:25:24)

  ● Twilio Service › sendWapp › should handle errors gracefully

    accountSid must start with AC

      23 |
      24 |   beforeEach(() => {
    > 25 |     mockTwilioClient = twilio();
         |                        ^
      26 |     jest.clearAllMocks();
      27 |   });
      28 |

      at Twilio.setAccountSid (node_modules/twilio/lib/base/BaseTwilio.js:82:23)
      at new Client (node_modules/twilio/lib/base/BaseTwilio.js:45:18)
      at new Twilio (node_modules/twilio/lib/rest/Twilio.js:33:9)
      at TwilioSDK (node_modules/twilio/lib/index.js:43:12)
      at Object.<anonymous> (tests/twilioService.test.js:25:24)

  ● Twilio Service › smsFallback › should call Twilio client messages.create with correct parameters

    accountSid must start with AC

      23 |
      24 |   beforeEach(() => {
    > 25 |     mockTwilioClient = twilio();
         |                        ^
      26 |     jest.clearAllMocks();
      27 |   });
      28 |

      at Twilio.setAccountSid (node_modules/twilio/lib/base/BaseTwilio.js:82:23)
      at new Client (node_modules/twilio/lib/base/BaseTwilio.js:45:18)
      at new Twilio (node_modules/twilio/lib/rest/Twilio.js:33:9)
      at TwilioSDK (node_modules/twilio/lib/index.js:43:12)
      at Object.<anonymous> (tests/twilioService.test.js:25:24)

  ● Twilio Service › smsFallback › should handle errors gracefully

    accountSid must start with AC

      23 |
      24 |   beforeEach(() => {
    > 25 |     mockTwilioClient = twilio();
         |                        ^
      26 |     jest.clearAllMocks();
      27 |   });
      28 |

      at Twilio.setAccountSid (node_modules/twilio/lib/base/BaseTwilio.js:82:23)
      at new Client (node_modules/twilio/lib/base/BaseTwilio.js:45:18)
      at new Twilio (node_modules/twilio/lib/rest/Twilio.js:33:9)
      at TwilioSDK (node_modules/twilio/lib/index.js:43:12)
      at Object.<anonymous> (tests/twilioService.test.js:25:24)

(node:20318) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL tests/pipelineFlow.test.js
  ● Console

    console.log
      ✅ Loaded 524 knowledge base entries

      at src/agentController.js:25:11

  ● Pipeline Flow Integration › handles multiple questions with vector search fallback

    TypeError: getHistory.mockResolvedValue is not a function

      22 |     
      23 |     // Mock memory service
    > 24 |     getHistory.mockResolvedValue({
         |                ^
      25 |       history: mockHistory,
      26 |       customer: { firstName: 'Test' }
      27 |     });

      at Object.<anonymous> (tests/pipelineFlow.test.js:24:16)

  ● Pipeline Flow Integration › handles zero vector search matches gracefully

    TypeError: getHistory.mockResolvedValue is not a function

      22 |     
      23 |     // Mock memory service
    > 24 |     getHistory.mockResolvedValue({
         |                ^
      25 |       history: mockHistory,
      26 |       customer: { firstName: 'Test' }
      27 |     });

      at Object.<anonymous> (tests/pipelineFlow.test.js:24:16)

(node:20317) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
FAIL tests/smartAnswer.test.js
  ● smartAnswer › filters out invalid messages

    TypeError: Cannot read properties of null (reading 'user')

      350 |   for (let i = history.length - 1; i >= 0; i--) {
      351 |     const exchange = history[i];
    > 352 |     if (exchange.user) {
          |                  ^
      353 |       const normalizedPrevQuestion = normalize(exchange.user);
      354 |       const similarity = calculateTextSimilarity(normalizedQuestion, normalizedPrevQuestion);
      355 |       

      at findSimilarPreviousQuestion (services/ragChain.js:352:18)
      at smartAnswer (services/ragChain.js:420:29)
      at Object.<anonymous> (tests/smartAnswer.test.js:39:11)

Test Suites: 5 failed, 5 total
Tests:       16 failed, 2 passed, 18 total
Snapshots:   0 total
Time:        3.233 s
Ran all test suites.
